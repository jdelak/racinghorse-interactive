<head>
{% block stylesheets %}
    {{ encore_entry_link_tags('app') }}
{% endblock %}
</head>
{% block body %}
    <div id="phaser-container"></div>
    {% for horse in horses %}
        <span class="players" data-skin="{{ horse.getHorseSkin() }}" data-user="{{ horse.getName() }}" data-min="{{ horse.getMinSpeed() }}" data-max="{{ horse.getMaxSpeed() }}" data-acc="{{ horse.getAcceleration() }}" data-endu="{{ horse.getEndurance() }}"></span>
    {% endfor %}
    <div id="results" class="results-modal">
     <div class="modal-content">
            <h3 class="text-xl mb-8">Résultats de la course</h3>
            <ol class="max-w-md space-y-1 text-gray-500 list-decimal list-inside dark:text-gray-400" id="results-list"></ol>
            <a class="mt-8 bg-green-500 p-4 hover:bg-green-300" href="{{ path('lobby') }}">Retour au Lobby</a>
        </div>
    </div>
    <div id="countdown" class="countdown"></div>

    <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const config = {
                type: Phaser.AUTO,
                width: 1920,
                height: 900,
                parent: 'phaser-container',
                physics: {
                    default: 'arcade',
                    arcade: {
                        gravity: { y: 0 },
                        debug: false
                    }
                },
                scene: {
                    preload: preload,
                    create: create,
                    update: update
                }
            };

            const game = new Phaser.Game(config);
            let horses = [];
            let raceLength = 28000;
            let raceStarted = false;
            let countdown = 5;
            let countdownText;
            let camera;

            function preload() {
                this.load.image('track', 'assets/images/horseracing_turf_repeat.png');
                this.load.image('horse1', 'assets/images/horses/1.png');
                this.load.image('horse2', 'assets/images/horses/2.png');
                this.load.image('horse3', 'assets/images/horses/3.png');
                this.load.image('horse4', 'assets/images/horses/4.png');
            }

            function create() {
                camera = this.cameras.main;
                camera.setLerp(0.25, 0.25);

                // Créer un tileSprite pour le fond qui se répète
                this.background = this.add.tileSprite(0, 0, raceLength + (camera.width / 2), this.game.config.height, 'track');
                this.background.setOrigin(0, 0);

                countdownText = this.add.text(960, 440, countdown, { fontSize: '200px', fill: '#fff' }).setOrigin(0.5);
                const racers = document.getElementsByClassName("players");
                Array.from(racers).forEach((racer, index) => {
                    const name = racer.dataset.user;
                    const minSpeed = racer.dataset.min;
                    const maxSpeed = racer.dataset.max;
                    const acceleration = racer.dataset.acc;
                    const endurance = racer.dataset.endu;
                    const horse = this.add.sprite(100, 236 + index * 80, `horse${racer.dataset.skin}`);
                    horse.textName = this.add.text(horse.x - 32, horse.y - 48, name);
                    horse.displayWidth = 64;
                    horse.displayHeight = 64;
                    horse.name = name;
                    horse.minSpeed = minSpeed;
                    horse.maxSpeed = maxSpeed;
                    horse.acceleration = acceleration;
                    horse.endurance = endurance;
                    horse.currentSpeed = minSpeed;
                    horse.time = 0;
                    horse.distance = 0;
                    horse.finished = false;
                    horses.push(horse);
                });

                startCountdown();
            }

            function startCountdown() {
                const countdownInterval = setInterval(() => {
                    countdown--;
                    countdownText.setText(countdown);
                    if (countdown < 0) {
                        clearInterval(countdownInterval);
                        countdownText.destroy();
                        raceStarted = true;
                    }
                }, 1000);
            }

            function update() {
                if (raceStarted) {
                    let leadingHorse = horses[0];
                    let allFinished = true;
 
                    horses.forEach(horse => {
                        if (!horse.finished) {
                            horse.time += 0.1;
                            horse.currentSpeed = horse.minSpeed + (horse.maxSpeed - horse.minSpeed) * (horse.time / horse.acceleration);
                            horse.distance += horse.currentSpeed * 0.1;
                            horse.x = horse.distance;
                            horse.textName.x = horse.distance - 32;
                            if (horse.distance >= raceLength) {
                                horse.finished = true;
                                horse.x = raceLength;
                                horse.textName.x = horse.x - 32;
                            } else {
                                allFinished = false;
                            }

                            // Mettre à jour le cheval leader
                            if (horse.distance > leadingHorse.distance) {
                                leadingHorse = horse;
                            }
                        }
                    });

                    if(leadingHorse.x < (camera.width / 2)){
                        camera.scrollX = 0;
                    }else{
                        camera.scrollX = leadingHorse.x - camera.width / 2;
                    }

                    // Vérifier si tous les chevaux ont terminé la course
                    if (allFinished) {
                        showResults();
                    }
                }
            }

            function showResults() {
                const resultsModal = document.getElementById("results");
                const resultsList = document.getElementById("results-list");
                resultsList.innerHTML = '';

                // Trier les chevaux par temps de course
                horses.sort((a, b) => a.time - b.time);

                // Ajouter les résultats à la liste
                horses.forEach((horse, index) => {
                    const listItem = document.createElement('li');
                    listItem.textContent = `${horse.name}: ${(horse.time / 6).toFixed(2)} seconds`;
                    resultsList.appendChild(listItem);
                });

                // Afficher la modal de résultats
                resultsModal.style.display = 'block';
            }


        });
    </script>
{% endblock body %}